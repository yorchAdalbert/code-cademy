.notecard {
  width: 300px;
  height: 180px;
  border: 1px solid black;
  display: inline-block;
  margin: 20px;
  font-family: Roboto, sans-serif;
  box-shadow: 1px 1px 2px 2px rgba(0, 0, 0, 0.2);
  transform-style: preserve-3d;
  -moz-transform-style: preserve-3d;
  -o-transform-style: preserve-3d;
  -ms-transform-style: preserve-3d;
  -webkit-transform-style: preserve-3d;
  transition: 0.4s;
  -webkit-transition: 0.4s;
  -moz-transition: 0.4s;
  -o-transition: 0.4s;
}
.notecard:hover {
  transform: rotatey(-180deg);
  -webkit-transform: rotatey(-180deg);
  -moz-transform: rotatey(-180deg);
  -ms-transform: rotatey(-180deg);
  -o-transform: rotatey(-180deg);
}
.notecard .front,
.notecard .back {
  width: 100%;
  height: 100%;
  position: absolute;
  backface-visibility: hidden;
  -webkit-backface-visibility: hidden;
  -moz-backface-visibility: hidden;
  -ms-backface-visibility: hidden;
  -moz-backface-visibility: hidden;
}
.notecard .front {
  z-index: 3;
  font-size: 20px;
}
.notecard .front .word {
  display: block;
  text-align: center;
  position: relative;
  top: 40%;
}
.notecard .front .word:hover {
  color: purple;
}
.notecard .back {
  z-index: 1;
  word-wrap: break-word;
  line-height: 1.6;
  transform: rotatey(-180deg);
  -webkit-transform: rotatey(-180deg);
  -moz-transform: rotatey(-180deg);
  -ms-transform: rotatey(-180deg);
  -o-transform: rotatey(-180deg);
}
.notecard .back .definition {
  width: 100%;
  height: 100%;
  background: repeating-linear-gradient(to bottom, white, white 14%, blue 1%, white 15%);
}
.notecard .back .photo {
  content: url(../../image/titanosaur.jfif);
  object-fit: cover;
  width: 60%;
  margin: 0 auto;
}

/*
    Mixin Facts

    1. Mixins can takes multiple arguments
    2. Sass allow you to explicitly define each argument in your @include statement
    3. When values are explicitly specified you can send them out or order
    4. If a mixin definition has a combination of arguments with and without a default value, you should define the ones with no default value first
    5. Mixins can be nested

    @mixin dashed-border($width, $color: #FFF) {
  border: {
     color: $color;
     width: $width;
     style: dashed;
  }
}

span { //only passes non-default argument
    @include dashed-border(3px);
}

p { //passes both arguments
    @include dashed-border(3px, green);
}

div { //passes out of order but explicitly defined
   @include dashed-border(color: purple, width: 5px); 
}
*/
/*
    Map syntax: 

    $college-ruled-style: ( 
        direction: to bottom,
        width-percent: 15%,
        stripe-color: blue,
        stripe-background: white
    );
*/

/*# sourceMappingURL=main.css.map */
